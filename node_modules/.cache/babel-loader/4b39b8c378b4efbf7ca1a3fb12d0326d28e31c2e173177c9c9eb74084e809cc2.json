{"ast":null,"code":"var _s = $RefreshSig$();\nimport { uiActions } from \"./ui-slice\";\nimport { useSelector } from \"react-redux\";\nimport { cartActions } from \"./cart-slice\";\nexport const initializeCartVisibility = () => {\n  _s();\n  const cartIsVisible = useSelector(state => state.ui.cartIsVisible);\n  return (dispatch, getState) => {\n    // const previousCartVisibility = getState().ui.cartIsVisible;\n    // console.log(previousCartVisibility);\n    dispatch(uiActions.setCartVisibility(cartIsVisible));\n  };\n};\n_s(initializeCartVisibility, \"jT4+xg7ljyuoHaolPhm1St7j0p0=\", false, function () {\n  return [useSelector];\n});\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://redux-practice-496e0-default-rtdb.firebaseio.com/cart.json\");\n      if (!response.ok) {\n        throw new Error(\"Could not fetch cart data!\");\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart(cartData));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data failed!\"\n      }));\n    }\n  };\n};\n\n// will dispatch this sendcartdata action\n\nexport const sendCartData = cart => {\n  // separate js standalone function\n  // before calling the dispatch we can perform any asynchronous code or sideeffect because we will have not reached our reducer yet\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n    const sendRequest = async () => {\n      const response = await fetch(\"https://redux-practice-496e0-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed\");\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sent cart data failed!\"\n      }));\n    }\n  };\n};","map":{"version":3,"names":["uiActions","useSelector","cartActions","initializeCartVisibility","_s","cartIsVisible","state","ui","dispatch","getState","setCartVisibility","fetchCartData","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify","items","totalQuantity"],"sources":["C:/Users/arfai/OneDrive/Desktop/Sanketika/redux practice/redux/src/store/cart-actions.js"],"sourcesContent":["import { uiActions } from \"./ui-slice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { cartActions } from \"./cart-slice\";\r\n\r\nexport const initializeCartVisibility = () => {\r\n  const cartIsVisible = useSelector((state) => state.ui.cartIsVisible);\r\n  return (dispatch, getState) => {\r\n    // const previousCartVisibility = getState().ui.cartIsVisible;\r\n    // console.log(previousCartVisibility);\r\n    dispatch(uiActions.setCartVisibility(cartIsVisible));\r\n  };\r\n};\r\nexport const fetchCartData = () => {\r\n  return async (dispatch) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-practice-496e0-default-rtdb.firebaseio.com/cart.json\"\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Could not fetch cart data!\");\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    };\r\n    try {\r\n      const cartData = await fetchData();\r\n      dispatch(cartActions.replaceCart(cartData));\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Fetching cart data failed!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\n// will dispatch this sendcartdata action\r\n\r\nexport const sendCartData = (cart) => {\r\n  // separate js standalone function\r\n  // before calling the dispatch we can perform any asynchronous code or sideeffect because we will have not reached our reducer yet\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending cart data!\",\r\n      })\r\n    );\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://redux-practice-496e0-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            items: cart.items,\r\n            totalQuantity: cart.totalQuantity,\r\n          }),\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending cart data failed\");\r\n      }\r\n    };\r\n\r\n    try {\r\n      await sendRequest();\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success!\",\r\n          message: \"Sent cart data successfully!\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Sent cart data failed!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,cAAc;AAE1C,OAAO,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5C,MAAMC,aAAa,GAAGJ,WAAW,CAAEK,KAAK,IAAKA,KAAK,CAACC,EAAE,CAACF,aAAa,CAAC;EACpE,OAAO,CAACG,QAAQ,EAAEC,QAAQ,KAAK;IAC7B;IACA;IACAD,QAAQ,CAACR,SAAS,CAACU,iBAAiB,CAACL,aAAa,CAAC,CAAC;EACtD,CAAC;AACH,CAAC;AAACD,EAAA,CAPWD,wBAAwB;EAAA,QACbF,WAAW;AAAA;AAOnC,OAAO,MAAMU,aAAa,GAAGA,CAAA,KAAM;EACjC,OAAO,MAAOH,QAAQ,IAAK;IACzB,MAAMI,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oEACF,CAAC;MACD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC;IACD,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMP,SAAS,CAAC,CAAC;MAClCJ,QAAQ,CAACN,WAAW,CAACkB,WAAW,CAACD,QAAQ,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdb,QAAQ,CACNR,SAAS,CAACsB,gBAAgB,CAAC;QACzBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAE;MACX,CAAC,CACH,CAAC;IACH;EACF,CAAC;AACH,CAAC;;AAED;;AAEA,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EACpC;EACA;EACA,OAAO,MAAOnB,QAAQ,IAAK;IACzBA,QAAQ,CACNR,SAAS,CAACsB,gBAAgB,CAAC;MACzBC,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,YAAY;MACnBC,OAAO,EAAE;IACX,CAAC,CACH,CAAC;IACD,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oEAAoE,EACpE;QACEe,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAEN,IAAI,CAACM,KAAK;UACjBC,aAAa,EAAEP,IAAI,CAACO;QACtB,CAAC;MACH,CACF,CAAC;MACD,IAAI,CAACrB,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;IACF,CAAC;IAED,IAAI;MACF,MAAMY,WAAW,CAAC,CAAC;MACnBpB,QAAQ,CACNR,SAAS,CAACsB,gBAAgB,CAAC;QACzBC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,UAAU;QACjBC,OAAO,EAAE;MACX,CAAC,CACH,CAAC;IACH,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdb,QAAQ,CACNR,SAAS,CAACsB,gBAAgB,CAAC;QACzBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAE;MACX,CAAC,CACH,CAAC;IACH;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}